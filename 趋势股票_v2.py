import pandas as pd

from datetime import date
from 工具 import 获取股票数据, 获取股票信息

市值阈值 = 50_000_000_000
股票信息 = 获取股票信息(沪深 = True)
'''
策略变量:
  趋势判定天数: 上升趋势持续的天数
条件定义:
  上升趋势: MA5>10>30>60
买入信号判断:
  持续上升趋势: 上升趋势持续天数 >= 趋势判定天数
'''

持续天数备选 = [3,4,5,6]

def 日期转字符(date: date):
  return date.strftime('%Y-%m-%d')

def 计算趋势数据(数据: pd.DataFrame, 天数列表: list, 信号key生成, 重复使用 = False):
  上升趋势 =  数据.apply(lambda x: x['MA5'] >= x['MA10'] >= x['MA30'] >= x['MA60'], axis=1).astype(int)
  # 数据['上升趋势'] = 上升趋势
  for 天数 in 天数列表:
    连续上升 = 上升趋势.rolling(window=天数).mean() == 1
    if 重复使用:
      # 交易完后如果波段继续可继续交易
      # 其实只有第一次是符合的, 第二次其实就是 趋势判定天数 +(1/2)的情况了
      数据[信号key生成(天数)] = 连续上升
    else:
      # 每个波段只操作一次
      连续信号开始 = 连续上升 & (连续上升.shift(1) != True)
      数据[信号key生成(天数)] = 连续信号开始.shift(1) == True

  return 数据

def 信号key生成(天数):
  return f'信号_{天数}'

# 数据 = 计算趋势数据(获取股票数据('000001'), 持续天数备选, 信号key生成)
# 数据 = 数据[数据['日期'] > date.today().replace(month=1,day=1)]
# print(数据[[
#   '日期', 
#   # '开盘', '收盘', 
#   # 'MA5', 'MA10', 'MA30', 'MA60', 
#   '信号_3', '信号_4', '信号_5', '信号_6'
# ]].to_string(index=False))


'''
验证:
  开始时间以来, 每月的PnL, 没有交易的月份可以不用
'''
def sim_single(代号, 开始时间):
  数据 = 获取股票数据(代号)
  数据 = 数据[数据['日期'] >= 开始时间]
  数据 = 计算趋势数据(数据, 持续天数备选, 信号key生成)
  结果 = {}
  for 天数 in 持续天数备选:
    交易 = []
    信号key = 信号key生成(天数)
    买入成本 = 0
    持股天数 = 0
    for i, x in 数据.iterrows():
      # 这里买卖默认都是可以正常交易的情形，没有考虑涨跌停的情况
      if 买入成本:
        持股天数+=1
        if 买入成本 < x['收盘'] and 持股天数 == 1:
          continue
        日期 = 日期转字符(x['日期'])
        交易.append({
          '日期': 日期,
          '月份': '-'.join(日期.split('-')[0:2]),
          '成本': 买入成本,
          '持股天数': 持股天数,
          '盈亏百分比': 100 * ((x['收盘'] - 买入成本) / 买入成本),
        })
        买入成本 = 0
      else:
        if not x[信号key]:
          continue
        买入成本 = (x['开盘'] + x['收盘']) / 2
        持股天数 = 0
      
    结果[天数] = {
      # '交易': 交易, 
      '总盈亏百分比': sum([x['盈亏百分比'] for x in 交易] + [0])
    }
  return 结果

结果 = sim_single('000001', date.today().replace(year=2023,month=1,day=1))
print(结果)

数据缓存 = {}
def 获取数据(代号):
  return 数据缓存.get(代号, 获取股票数据(代号))

def 模拟(目标日期, 市值阈值, 上升确认天数):
  总盈亏 = 0
  for 代号, 信息 in 股票信息.items():
    市值 = 信息['总市值']
    if 市值 < 市值阈值:
      continue
    数据 = 获取数据(代号).copy()
    数据 = 数据[数据['日期'] >= 目标日期]
    数据['上升'] =  数据.apply(lambda x: x['MA5'] >= x['MA10'] >= x['MA30'] >= x['MA60'], axis=1).astype(int)


    连续上升 = 数据['上升'].rolling(window=上升确认天数).mean() == 1
    连续信号开始 = 连续上升 & (连续上升.shift(1) != True)
    数据['连续信号开始'] = 连续信号开始
    数据['买入信号'] = 连续信号开始.shift(1) == True


    目标数据 = 数据[数据['买入信号']]
    if 目标数据.empty:
      continue

    盈亏 = [0]
    买入成本 = 0
    持股天数 = 0
    for i, x in 数据.iterrows():
      if 买入成本:
        持股天数 += 1
        浮盈亏 = (x['收盘'] - 买入成本) / 买入成本
        if 持股天数 == 1 and 浮盈亏 < 0:
          continue
        盈亏.append(浮盈亏)
        买入成本 = 0
      elif x['买入信号']:
        买入成本 = (x['开盘'] + x['收盘'])/ 2
        持股天数 = 0

    盈亏 = round(sum(盈亏) * 100, 2)
    总盈亏+=盈亏

    # print({'代号': 代号, '公司': 信息['name'], '上升波段数量': len(目标数据), '盈亏': 盈亏 })
    # print({'代号': 代号, '公司': 信息['name'], '日期': [x for x in 目标数据['日期'].apply(日期转字符)], '上升波段数量': len(目标数据), '盈亏': 盈亏 })

  print(f'{日期转字符(目标日期)}开始有上升波段的股票(市值>{市值阈值},上升确认天数={上升确认天数}) - 总盈亏: {round(总盈亏, 2)}')

# for 月份 in range(1, 6):
#   for 上升天数 in range(1, 7):
#     模拟(date.today().replace(month=月份,day=1), 市值阈值, 上升天数)
#   print('\n')